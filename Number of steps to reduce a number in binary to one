/*
Given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:

If the current number is even, you have to divide it by 2.

If the current number is odd, you have to add 1 to it.

It is guaranteed that you can always reach one for all test cases.

Example 1:

Input: s = "1101"
Output: 6
Explanation: "1101" corressponds to number 13 in their decimal representation.
Step 1) 13 is odd, add 1 and obtain 14. 
Step 2) 14 is even, divide by 2 and obtain 7.
Step 3) 7 is odd, add 1 and obtain 8.
Step 4) 8 is even, divide by 2 and obtain 4.  
Step 5) 4 is even, divide by 2 and obtain 2. 
Step 6) 2 is even, divide by 2 and obtain 1.  
Example 2:

Input: s = "10"
Output: 1
Explanation: "10" corressponds to number 2 in their decimal representation.
Step 1) 2 is even, divide by 2 and obtain 1.  
Example 3:

Input: s = "1"
Output: 0
 

Constraints:

1 <= s.length <= 500
s consists of characters '0' or '1'
s[0] == '1'
*/


package leetCode;

import java.math.BigInteger;

class Solution {
	public int numSteps(String s) {	
		 //i  Converted the binary string to a BigInteger because using int got numberFormatException
        BigInteger num = new BigInteger(s, 2);
        //count variable to count the steps
        int count = 0;

        // checking condition While num is greater than 1
        while (num.compareTo(BigInteger.ONE) > 0) {         //while(num>1)

        //checking if the num is even or odd
            if (num.mod(BigInteger.TWO).equals(BigInteger.ZERO)) {  // while(num%2=0)

                // If num is found  even, divided by 2
                num = num.divide(BigInteger.TWO);

            } else {
                // If num is found  odd then add 1
                num = num.add(BigInteger.ONE);
            }
            count++;
		}
		System.out.println(count);
		return count;
    }
}

public class Step_to_Binary_Representation {

	public static void main(String[] args) {

		Solution obj = new Solution();
		obj.numSteps("1111011110000011100000110001011011110010111001010111110001");
	}

}

