/*

Given two strings s and p. Find the smallest window in the string s consisting of all the characters(including duplicates) of the string p.  Return "-1" in case there is no such window present. In case there are multiple such windows of same length, return the one with the least starting index.
Note : All characters are in Lowercase alphabets. 

Examples:

Input: s = "timetopractice", p = "toc"
Output: toprac
Explanation: "toprac" is the smallest
substring in which "toc" can be found.
Input: s = "zoomlazapzo", p = "oza"
Output: apzo
Explanation: "apzo" is the smallest 
substring in which "oza" can be found.
Expected Time Complexity: O(|s|)
Expected Auxiliary Space: O(n), n = len(p)

Constraints: 
1 ≤ |s|, |p| ≤ 105

*/

class Solution
{
    //Function to find the smallest window in the string s consisting
    //of all the characters of string p.
    public static String smallestWindow(String s, String p)
    {
         if (s.length() < p.length()) return "-1";

        HashMap<Character, Integer> pMap = new HashMap<>();
        for (char c : p.toCharArray()) pMap.put(c, pMap.getOrDefault(c, 0) + 1);

        int count = pMap.size();
        int minLen = Integer.MAX_VALUE;
        int start = 0;
        int left = 0;

        for (int right = 0; right < s.length(); right++) {
            char rightChar = s.charAt(right);
            if (pMap.containsKey(rightChar)) {
                pMap.put(rightChar, pMap.get(rightChar) - 1);
                if (pMap.get(rightChar) == 0) count--;
            }

            while (count == 0) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    start = left;
                }

                char leftChar = s.charAt(left);
                if (pMap.containsKey(leftChar)) {
                    pMap.put(leftChar, pMap.get(leftChar) + 1);
                    if (pMap.get(leftChar) > 0) count++;
                }
                left++;
            }
        }

        return minLen == Integer.MAX_VALUE ? "-1" : s.substring(start, start + minLen);
    }
}
